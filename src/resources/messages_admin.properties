# Admin Commands Language File - BULLETPROOF: NO MARKDOWN
# ALL admin interface text centralized - Works with any system data
# UPDATED: Added Premium Management + Username Support

# Startup message template (UPDATED with premium count)
admin.startup.message=🚀 Bot Started Successfully\n\
\n\
📊 System Information:\n\
• Database: ✅ Connected\n\
• Bot API: ✅ Connected\n\
• TDLib: {0}\n\
• Admin ID: {1}\n\
\n\
💾 Database Performance:\n\
• Connection pool: {2} max connections\n\
• Active connections: {3}\n\
• Pool optimization: WAL mode + statement caching\n\
\n\
🚦 Rate Limiting:\n\
• Messages per minute: {4}\n\
• Burst size: {5}\n\
\n\
📋 Basic Commands:\n\
• /admin - Show admin dashboard\n\
• /admin help - Show admin help

# System notification templates
system.startup.success=🚀 Bot Started Successfully\n\
\n\
📊 System Information:\n\
• Database: ✅ Connected\n\
• Bot API: ✅ Connected\n\
• TDLib: {0}\n\
• Admin ID: {1}\n\
\n\
📋 Available Commands:\n\
• /admin health - System status\n\
• /admin channels - Channel management\n\
• /help - User help\n\
\n\
The bot is ready to receive commands!

system.limited.mode=⚠️ Bot Started in Limited Mode\n\
\n\
TDLib configuration is missing. The bot is running in bot-only mode.\n\
\n\
❌ Missing configuration:\n\
- API_ID\n\
- API_HASH\n\
- PHONE_NUMBER\n\
\n\
📊 Current functionality:\n\
✅ User commands (/help, /keywords, etc.)\n\
✅ Admin commands (/admin health, etc.)\n\
❌ Channel monitoring (requires TDLib)\n\
\n\
To enable full functionality, please configure the missing environment variables and restart the bot.

# TDLib authentication templates
tdlib.auth.code.needed=🔐 TDLib Waiting for Code\n\
\n\
Please send the authentication code you received via SMS or in Telegram on another device using:\n\
/admin auth_code <code>

tdlib.auth.password.needed=🔐 TDLib Waiting for Password\n\
\n\
Please enter your 2FA password using:\n\
/admin auth_password <password>

tdlib.connected=✅ TDLib Connected\n\
\n\
User account authentication successful. Channel monitoring is now active!

# Admin notification prefix
admin.notification.prefix=🤖 Admin Notification

# Main Dashboard (UPDATED with premium count)
admin.dashboard.title=🔧 ADMIN DASHBOARD
admin.dashboard.shutdown.active=\n🚨 STATUS: SHUTDOWN MODE ACTIVE
admin.dashboard.server.time=🕐: {0}
admin.dashboard.quick.status.with.premium=📊 QUICK STATUS:\n\
• Active users: {0}\n\
• Premium users: {1}\n\
• Monitored channels: {2}\n\
• Recent errors: {3}\n\
• Overloaded users: {4}\n\
• TDLib: {5}\n\
• System log level: {6}\n\
• TDLib log level: {7}\n\
\n\
Use the buttons below for navigation:

# Main Dashboard Buttons (UPDATED with premium button)
admin.dashboard.button.system=📊 System
admin.dashboard.button.channels=📋 Channels
admin.dashboard.button.users=👤 Users
admin.dashboard.button.premium=💎 Premium Users
admin.dashboard.button.help=❓ Admin Help
admin.dashboard.button.refresh=🔄 Refresh Dashboard

# NEW: Premium Menu
admin.premium.menu.title=💎 PREMIUM USER MANAGEMENT\n\
\n\
📊 Current premium users: {0}\n\
\n\
Use the buttons below to manage premium subscriptions:

admin.premium.button.list=📋 List Premium Users
admin.premium.button.grant=➕ Grant Premium
admin.premium.button.revoke=➖ Revoke Premium

# NEW: Premium Management Commands (UPDATED: Added username support)
admin.premium.grant.usage=❌ USAGE: /admin grant_premium <user_id_or_username> [reason]\n\
\n\
💡 EXAMPLES:\n\
- /admin grant_premium 123456789\n\
- /admin grant_premium 123456789 Early supporter reward\n\
- /admin grant_premium @username Premium access\n\
\n\
⚠️ USERNAME LIMITATION:\n\
@username only works for users who have used this bot before.\n\
For new users, use their numeric User ID instead.\n\
\n\
📋 To get User ID: Forward any message from the user to @userinfobot
admin.premium.grant.invalid.id=❌ Invalid user ID. Must be a number.
admin.premium.grant.invalid.user=❌ USER NOT FOUND: {0}\n\
\n\
⚠️ LIMITATION: @username only works for users who have used this bot before.\n\
\n\
💡 SOLUTIONS:\n\
- Use numeric User ID: 123456789\n\
- Get User ID: Forward any message from the user to @userinfobot\n\
- Ask the user to send /start to this bot first
admin.premium.grant.already.premium=⚠️ User {0} already has premium status.
admin.premium.grant.already.premium.detailed=⚠️ USER ALREADY PREMIUM\n\
\n\
👤 User: {0} {1}\n\
📋 Status: Already has premium access\n\
\n\
💡 TIP: Use /admin premium_users to see all premium users.
admin.premium.grant.success=✅ PREMIUM GRANTED SUCCESSFULLY\n\
\n\
👤 User ID: {0}\n\
📝 Reason: {1}\n\
👨‍💼 Granted by: Admin\n\
🕐 Time: {2}
admin.premium.grant.failed=❌ Failed to grant premium status.

admin.premium.revoke.usage=❌ USAGE: /admin revoke_premium <user_id_or_username> [reason]\n\
\n\
💡 EXAMPLES:\n\
- /admin revoke_premium 123456789\n\
- /admin revoke_premium 123456789 Subscription expired\n\
- /admin revoke_premium @username Policy violation\n\
\n\
⚠️ USERNAME LIMITATION:\n\
@username only works for users who have used this bot before.\n\
For new users, use their numeric User ID instead.
admin.premium.revoke.invalid.id=❌ Invalid user ID. Must be a number.
admin.premium.revoke.invalid.user=❌ USER NOT FOUND: {0}\n\
\n\
⚠️ LIMITATION: @username only works for users who have used this bot before.\n\
\n\
💡 SOLUTIONS:\n\
- Use numeric User ID: 123456789\n\
- Get User ID: Forward any message from the user to @userinfobot\n\
- Ask the user to send /start to this bot first
admin.premium.revoke.not.premium=⚠️ User {0} does not have premium status.
admin.premium.revoke.success=✅ PREMIUM REVOKED SUCCESSFULLY\n\
\n\
👤 User ID: {0}\n\
📝 Reason: {1}\n\
👨‍💼 Revoked by: Admin\n\
🕐 Time: {2}
admin.premium.revoke.failed=❌ Failed to revoke premium status.

admin.premium.users.title=💎 PREMIUM USERS
admin.premium.users.timestamp=🕐 Time: {0}
admin.premium.users.empty=No premium users found.
admin.premium.users.list=💎 CURRENT PREMIUM USERS:\n\
\n\
{0}\n\
\n\
📊 Total premium users: {1}\n\
\n\
⚙️ MANAGEMENT:\n\
Use /admin grant_premium <user_id> <reason> to grant premium\n\
Use /admin revoke_premium <user_id> [reason] to revoke premium
admin.premium.users.item={0}. 👤 User: {1} {2}\n\
   💎 Premium since: {3} ({4} days ago)\n\
   📝 Reason: {5}

# Premium Grant/Revoke Instructions
admin.premium.grant.instructions=💎 GRANT PREMIUM ACCESS\n\
\n\
📝 INSTRUCTIONS:\n\
Use the button below to enter a grant command.\n\
\n\
📋 FORMAT: /admin grant_premium <user_id> <reason>\n\
💡 EXAMPLE: /admin grant_premium 123456789 Early supporter reward\n\
\n\
🎯 PREMIUM FEATURES:\n\
• Historical monitoring (/history command)\n\
• Personal channel management\n\
• Advanced keyword matching

admin.premium.grant.button.enter=✏️ Enter Grant Command

admin.premium.revoke.instructions=💎 REVOKE PREMIUM ACCESS\n\
\n\
📝 INSTRUCTIONS:\n\
Use the button below to enter a revoke command.\n\
\n\
📋 FORMAT: /admin revoke_premium <user_id> [reason]\n\
💡 EXAMPLE: /admin revoke_premium 123456789 Subscription expired\n\
\n\
⚠️ NOTE: User will lose access to all premium features immediately.

admin.premium.revoke.button.enter=✏️ Enter Revoke Command

# Premium Grant Confirmation
admin.premium.grant.confirm.title=💎 GRANT PREMIUM CONFIRMATION
admin.premium.grant.confirm.details=User to grant premium: {0} {1}\n\
Current activity: {2} total commands\n\
\n\
To proceed with granting premium, use:\n\
/admin grant_premium {3} <reason>\n\
\n\
EXAMPLE:\n\
/admin grant_premium {4} Early supporter reward\n\
\n\
💎 PREMIUM FEATURES:\n\
• Historical monitoring\n\
• Personal channel management\n\
• Advanced search capabilities

# Button text for premium actions
admin.button.enter.grant.command=✏️ Enter Grant Command
admin.button.enter.revoke.command=✏️ Enter Revoke Command
admin.button.cancel=❌ Cancel

# System Menu
admin.system.menu.title=📊 SYSTEM MANAGEMENT
admin.system.button.health=📈 System Health
admin.system.button.errors=🚨 Recent Errors
admin.system.button.log.level=📊 System Log Level: {0}
admin.system.button.tdlib.log.level=📱 TDLib Log Level: {0}
admin.system.button.auth=🔐 TDLib Authentication
admin.system.button.list.admins=👥 List Admins
admin.system.button.emergency.shutdown=⚠️ Emergency Shutdown
admin.system.button.cancel.shutdown=🟢 Cancel Shutdown

# List Admins functionality
admin.list.admins.page=👥 AUTHORIZED ADMINS\n\
\n\
📊 Total admins: {0}\n\
\n\
📋 Admin list:\n\
{1}\n\
\n\
💡 MANAGEMENT:\n\
To add more admins, update AUTHORIZED_ADMIN_IDS in configuration and restart the bot.\n\
\n\
🔧 CURRENT CONFIG:\n\
Each admin has full access to all bot commands and functions.

admin.list.admins.item=  {0}. Admin ID: {1}

# Channels Menu
admin.channels.menu.title=📋 CHANNEL MANAGEMENT
admin.channels.button.list=📋 Channel List
admin.channels.button.add=➕ Add Channel
admin.channels.button.remove=➖ Remove Channel
admin.channels.button.check=🔍 Check All Channels

# Users Menu
admin.users.menu.title=👤 USER MANAGEMENT
admin.users.button.rate.limits=🚦 Rate Limits
admin.users.button.rate.settings=⚙️ Rate Limit Settings
admin.users.button.banned=👤 Banned Users
admin.users.button.ban=🚫 Ban User
admin.users.button.unban=✅ Unban User

# System Log Level Menu
admin.system.log.level.title=📊 SYSTEM LOG LEVEL MANAGEMENT
admin.system.log.level.current=Current Level: {0}
admin.system.log.level.available=Available Levels:\n\
• DEBUG - Very verbose (all operations)\n\
• INFO - Normal operations\n\
• WARN - Warnings and errors only\n\
• ERROR - Errors only
admin.system.log.level.success=✅ System log level changed to {0}\n\
\n\
Changes are effective immediately.
admin.system.log.level.failed=❌ Failed to change system log level.

# TDLib Log Level Menu
admin.tdlib.log.level.title=📱 TDLIB LOG LEVEL MANAGEMENT
admin.tdlib.log.level.current=Current Level: {0}
admin.tdlib.log.level.available=Available Levels:\n\
• FATAL - Only fatal errors\n\
• ERROR - Errors only\n\
• WARNING - Warnings + errors\n\
• INFO - Info + warnings + errors\n\
• DEBUG - Debug + all above\n\
• VERBOSE - Everything
admin.tdlib.log.level.success=✅ TDLib log level changed to {0}\n\
\n\
Changes are effective immediately.
admin.tdlib.log.level.failed=❌ Failed to change TDLib log level.

# TDLib Authentication
admin.tdlib.auth.status=🔐 TDLIB AUTHENTICATION STATUS
admin.tdlib.auth.connected=✅ TDLib Connected\n\
\n\
User account is authenticated and channel monitoring is active.
admin.tdlib.auth.connected.details=✅ TDLIB CONNECTION DETAILS\n\
\n\
Status: Connected and authenticated\n\
Features Available:\n\
• Channel monitoring\n\
• Group monitoring\n\
• Message processing\n\
• Channel management\n\
\n\
All TDLib features are operational.
admin.tdlib.auth.disconnected.details=❌ TDLIB CONNECTION DETAILS\n\
\n\
Status: Not connected\n\
Features Unavailable:\n\
• Channel monitoring\n\
• Group monitoring\n\
• Message processing\n\
• Channel management\n\
\n\
Please complete authentication to enable TDLib features.
admin.tdlib.auth.button.enter.code=📱 Enter Auth Code
admin.tdlib.auth.button.enter.password=🔑 Enter Password
admin.tdlib.auth.button.help=❓ Help
admin.tdlib.auth.button.status=📊 View Status
admin.tdlib.auth.help=🔐 TDLIB AUTHENTICATION HELP\n\
\n\
Authentication Process:\n\
1. TDLib sends SMS code to your phone number\n\
2. Enter the code using /admin auth_code <code>\n\
3. If 2FA is enabled, enter password using /admin auth_password <password>\n\
4. Once authenticated, channel monitoring becomes available\n\
\n\
Troubleshooting:\n\
• Code not received? Check phone number in configuration\n\
• 2FA password not working? Try again carefully\n\
• Still issues? Check TDLib logs in System menu

# Rate Limit Settings
admin.rate.settings.current=📊 CURRENT RATE LIMIT SETTINGS:\n\
• Max tokens (burst): {0}\n\
• Refill rate: {1} per minute
admin.rate.settings.instructions=📝 INSTRUCTIONS:\n\
Use the button below to change rate limits or clear all rate limits for all users.
admin.rate.settings.button.change=⚙️ Change Rate Limits
admin.rate.settings.button.clear.all=🧹 Clear All Rate Limits

# Ban/Unban User
admin.ban.user.instructions=🚫 BAN USER\n\
\n\
📝 INSTRUCTIONS:\n\
Use the button below to enter a ban command.\n\
\n\
📋 FORMAT: /admin ban <user_id> <reason>\n\
💡 EXAMPLE: /admin ban 123456789 Spam and abuse
admin.ban.user.button.enter=✏️ Enter Ban Command

admin.unban.user.instructions=✅ UNBAN USER\n\
\n\
📝 INSTRUCTIONS:\n\
Use the button below to enter an unban command.\n\
\n\
📋 FORMAT: /admin unban <user_id>\n\
💡 EXAMPLE: /admin unban 123456789
admin.unban.user.button.enter=✏️ Enter Unban Command

# Emergency Shutdown
admin.shutdown.confirm.title=⚠️ EMERGENCY SHUTDOWN CONFIRMATION
admin.shutdown.confirm.details=This will:\n\
• Stop accepting new user commands\n\
• Show maintenance message to users\n\
• Keep admin commands available\n\
• Require manual cancellation\n\
\n\
📊 CURRENT STATUS:\n\
• Uptime: {0}\n\
• Active users: {1}\n\
• Monitored channels: {2}\n\
\n\
Are you sure you want to shutdown the bot?
admin.shutdown.button.confirm=🚨 CONFIRM SHUTDOWN
admin.shutdown.button.cancel=❌ Cancel
admin.shutdown.executed=🚨 BOT SHUTDOWN ACTIVATED\n\
\n\
✅ Shutdown mode enabled\n\
• All user commands will show maintenance message\n\
• Admin commands remain available\n\
• 30-minute reminders will be sent\n\
\n\
📊 STATUS: Bot is now in maintenance mode
admin.shutdown.cancelled=🟢 SHUTDOWN CANCELLED\n\
\n\
✅ Normal operation restored\n\
• User commands are now available\n\
• Bot is fully operational\n\
\n\
📊 STATUS: Bot is running normally

# Common Buttons
admin.common.button.back=🔙 Back to Dashboard

# System Health (NO MARKDOWN - Contains dynamic system data)
admin.health.title=🏥 SYSTEM HEALTH REPORT
admin.health.timestamp=🕐 Time: {0}
admin.health.report=⏱️ Uptime: {0}\n\
👥 Active users: {1}\n\
📺 Monitored channels: {2}\n\
📊 Messages processed: {3}\n\
🚨 Error count: {4}\n\
{5}\n\
📱 TDLib Status: {6}\n\
💾 Database: ✅ Connected\n\
\n\
🚦 RATE LIMIT STATUS:\n\
• Max tokens: {7}\n\
• Refill rate: {8}/min\n\
• Active users: {9}\n\
• Overloaded users: {10}

admin.health.last.error=⚠️ Last error: {0}\n

# Errors (NO MARKDOWN - Contains error messages with special chars)
admin.errors.title=🚨 RECENT ERRORS
admin.errors.timestamp=🕐 Time: {0}
admin.errors.empty=No recent errors found. System is running smoothly! ✅
admin.errors.summary={0}\n\
\n\
📊 Total errors in memory: {1}
admin.errors.item=🕐 [{0}] {1} - {2}{3}

# Channels Management (NO MARKDOWN - Contains channel names with special chars)
admin.channels.title=📋 MONITORED CHANNELS
admin.channels.timestamp=🕐 Time: {0}
admin.channels.empty=No channels are currently being monitored.
admin.channels.list={0}\n\
\n\
📊 TOTAL: {1} channels\n\
\n\
💡 LEGEND:\n\
• Format: @tag or <tag unavailable> if no tag\n\
• Use /admin check_all_channels to check for broken channels
admin.channels.item=[{0}]: {1}\n\
- ID: {2}\n\
- Name: {3}

admin.channels.add.usage=❌ Please provide a channel identifier.\n\
\n\
📋 USAGE: /admin add_channel @channelname or /admin add_channel -1001234567890
admin.channels.add.exists=⚠️ Channel with ID {0} is already being monitored.
admin.channels.add.success=✅ Channel added successfully!\n\
\n\
🆔 ID: {0}\n\
🏷️ Tag: {1}\n\
📺 Name: {2}
admin.channels.add.failed=❌ Failed to join channel {0}.\n\
\n\
🚨 Error: {1}\n\
\n\
Please check if the channel exists and is accessible.
admin.channels.add.database.failed=❌ Failed to save channel to database.
admin.channels.add.tdlib.unavailable=✅ Channel {0} added successfully.\n\
\n\
⚠️ NOTE: TDLib unavailable - tag and name lookup disabled.
admin.channels.add.error.generic=❌ Error adding channel: {0}

admin.channels.remove.usage=❌ Please provide a channel identifier.\n\
\n\
📋 USAGE: /admin remove_channel @channelname or /admin remove_channel -1001234567890
admin.channels.remove.resolve.failed=❌ Failed to resolve channel from Telegram\n\
\n\
📝 Input: {0}\n\
🚨 Error: {1}\n\
\n\
The channel may not exist or may be private.
admin.channels.remove.lookup.failed=❌ Error looking up channel\n\
\n\
📝 Input: {0}\n\
🚨 Error: {1}
admin.channels.remove.not.found=❌ Channel not found in database\n\
\n\
🆔 Resolved ID: {0}\n\
📝 Input: {1}\n\
\n\
The channel is not being monitored by this bot.
admin.channels.remove.success=✅ Channel removed successfully!\n\
\n\
🆔 Resolved ID: {0}\n\
📝 Input: {1}\n\
📋 Action: Removed from monitoring and left channel
admin.channels.remove.database.failed=❌ Failed to remove channel from database\n\
\n\
🆔 ID: {0}
admin.channels.remove.tdlib.unavailable=❌ Cannot resolve @tag without TDLib connection. Please use channel ID instead.

admin.channels.check.start=🔍 STARTING CHANNEL VALIDATION...\n\
\n\
📊 Channels to check: {0}\n\
⏱️ Estimated time: {1} seconds\n\
\n\
This will:\n\
- Verify channel IDs haven''t changed\n\
- Check access permissions\n\
- Update channel names if different\n\
- Report any broken channels\n\
\n\
You''ll receive a detailed report when complete.

admin.channels.check.empty=📋 No channels to check.
admin.channels.check.tdlib.unavailable=❌ TDLib is not available. Cannot check channel information from Telegram.

admin.channels.check.report=📊 CHANNEL CHECK REPORT\n\
\n\
📈 SUMMARY:\n\
- ✅ Valid channels: {0}\n\
- ❌ Broken channels: {1}\n\
- 📋 Total checked: {2}\n\
{3}{4}

admin.channels.check.broken.item={0}. {1} : {2}
admin.channels.check.updated.item={0}. {1} : name updated from "{2}" to "{3}"
admin.channels.check.error=❌ Channel check failed: {0}

# Rate Limits (NO MARKDOWN - Contains usernames with special chars)
admin.rate.limits.title=🚦 RATE LIMITS STATUS
admin.rate.limits.timestamp=🕐 Time: {0}
admin.rate.limits.settings=📊 CURRENT SETTINGS:\n\
• Max tokens (burst): {0}\n\
• Refill rate: {1} per minute\n\
• Active users: {2}\n\
• Overloaded users: {3}
admin.rate.limits.overloaded.none=None
admin.rate.limits.overloaded.list={0}
admin.rate.limits.overloaded.item=• {0} {1} - {2} tokens left
admin.rate.limits.events.title=🚨 RECENT RATE LIMIT EVENTS:
admin.rate.limits.events.none=No recent rate limit events
admin.rate.limits.events.list={0}
admin.rate.limits.events.item=• {0} - User {1} {2} hit rate limit
admin.rate.limits.management=⚙️ MANAGEMENT OPTIONS:\n\
Use /admin set_rate_limit <per_minute> <burst> to change settings\n\
Use /admin clear_rate_limit <user_id> to clear specific user\n\
Use /admin clear_all_rate_limits to clear all users

admin.rate.limits.set.usage=❌ USAGE: /admin set_rate_limit <per_minute> <burst_size>\n\
\n\
💡 EXAMPLE: /admin set_rate_limit 60 10
admin.rate.limits.set.invalid.numbers=❌ Invalid numbers. Both values must be integers.
admin.rate.limits.set.invalid.range=❌ Invalid rate limits. Values must be between 10 and 200.
admin.rate.limits.set.success=✅ Rate limits updated successfully!\n\
\n\
📊 NEW SETTINGS:\n\
• {0} messages per minute\n\
• {1} burst size\n\
\n\
All users have been reset with new limits.
admin.rate.limits.set.failed=❌ Failed to update rate limits.

admin.rate.limits.clear.usage=❌ USAGE: /admin clear_rate_limit <user_id>\n\
\n\
💡 EXAMPLE: /admin clear_rate_limit 123456789
admin.rate.limits.clear.invalid=❌ Invalid user ID. Must be a number.
admin.rate.limits.clear.success=✅ Rate limit cleared for user {0}.
admin.rate.limits.clear.all.success=✅ All rate limits cleared.

# Authentication (Static responses)
admin.auth.code.usage=❌ Please provide the authentication code.\n\
\n\
USAGE: /admin auth_code 12345
admin.auth.code.submitted=📱 AUTHENTICATION CODE SUBMITTED\n\
\n\
{0}
admin.auth.code.unavailable=TDLib not available
admin.auth.code.success=Authentication code submitted
admin.auth.code.error=Error: {0}

admin.auth.password.usage=❌ Please provide the 2FA password.\n\
\n\
USAGE: /admin auth_password <password>
admin.auth.password.submitted=🔑 AUTHENTICATION PASSWORD SUBMITTED\n\
\n\
{0}
admin.auth.password.unavailable=TDLib not available
admin.auth.password.success=Authentication password submitted

# User Management (NO MARKDOWN - Contains usernames with special chars)
admin.user.ban.usage=❌ USAGE: /admin ban <user_id> <reason>\n\
\n\
💡 EXAMPLE: /admin ban 123456789 Excessive spam
admin.user.ban.invalid.id=❌ Invalid user ID. Must be a number.
admin.user.ban.cannot.ban.admin=❌ Cannot ban the admin user.
admin.user.ban.already.banned=⚠️ User {0} is already banned.
admin.user.ban.success=✅ USER BANNED SUCCESSFULLY\n\
\n\
👤 User ID: {0}\n\
📝 Reason: {1}\n\
👨‍💼 Banned by: Admin\n\
🕐 Time: {2}
admin.user.ban.failed=❌ Failed to ban user.

admin.user.unban.usage=❌ USAGE: /admin unban <user_id>\n\
\n\
💡 EXAMPLE: /admin unban 123456789
admin.user.unban.invalid.id=❌ Invalid user ID. Must be a number.
admin.user.unban.not.banned=⚠️ User {0} is not banned.
admin.user.unban.success=✅ USER UNBANNED SUCCESSFULLY\n\
\n\
👤 User ID: {0}\n\
👨‍💼 Unbanned by: Admin\n\
🕐 Time: {1}
admin.user.unban.failed=❌ Failed to unban user.

admin.user.banned.title=👤 BANNED USERS
admin.user.banned.timestamp=🕐 Time: {0}
admin.user.banned.empty=No users are currently banned.
admin.user.banned.list=🚫 CURRENTLY BANNED:\n\
\n\
{0}\n\
\n\
📊 Total banned users: {1}\n\
\n\
⚙️ MANAGEMENT:\n\
Use /admin unban <user_id> to unban a user
admin.user.banned.item={0}. 👤 User: {1} {2}\n\
   🚫 Banned: {3}\n\
   📝 Reason: {4}

# Ban Confirmation Dialog (Static content)
admin.user.ban.confirm.title=⚠️ BAN USER CONFIRMATION
admin.user.ban.confirm.details=User to ban: {0} {1}\n\
Current activity: {2} total commands\n\
\n\
To proceed with the ban, use:\n\
/admin ban {3} <reason>\n\
\n\
EXAMPLE:\n\
/admin ban {4} Excessive spam and rate limit abuse\n\
\n\
NOTE: User will be permanently banned until manually unbanned.

# Help (Static content) - 🔧 UPDATED: Added premium commands
admin.help.title=❓ ADMIN HELP
admin.help.content=AVAILABLE COMMANDS:\n\
\n\
DASHBOARD:\n\
• /admin - Interactive admin dashboard (same as /admin dashboard)\n\
• /admin dashboard - Interactive admin panel\n\
• /admin help - Show this help message\n\
\n\
SYSTEM:\n\
• /admin health - System health check\n\
• /admin errors - Show recent errors\n\
• /admin log_level [LEVEL] - Change system log level\n\
• /admin list_admins - Show all authorized admins\n\
\n\
CHANNEL MANAGEMENT:\n\
• /admin channels - List all channels (with IDs and @tags)\n\
• /admin add_channel <channel> - Add channel (by @tag or ID)\n\
• /admin remove_channel <channel> - Remove channel (by @tag or ID)\n\
• /admin check_all_channels - Check permissions and update names\n\
\n\
CHANNEL FORMATS SUPPORTED:\n\
• @channelname - Channel username\n\
• -1001234567890 - Channel ID\n\
• t.me/channelname - Channel link\n\
• https://t.me/channelname - Full channel URL\n\
\n\
RATE LIMITING:\n\
• /admin rate_limits - Show rate limit status\n\
• /admin set_rate_limit <per_min> <burst> - Update rate limits\n\
• /admin clear_rate_limit <user_id> - Clear user rate limit\n\
• /admin clear_all_rate_limits - Clear all rate limits\n\
\n\
USER MANAGEMENT:\n\
• /admin ban <user_id> <reason> - Ban user\n\
• /admin unban <user_id> - Unban user\n\
• /admin banned_users - List banned users\n\
\n\
PREMIUM MANAGEMENT:\n\
• /admin premium_users - List all premium users\n\
• /admin grant_premium <user_id> [reason] - Grant premium access (reason optional)\n\
• /admin revoke_premium <user_id> [reason] - Revoke premium access (reason optional)\n\
\n\
EMERGENCY:\n\
• /admin shutdown [reason] - Emergency shutdown\n\
• /admin cancel_shutdown - Cancel shutdown\n\
\n\
AUTHENTICATION:\n\
• /admin auth_code <code> - Submit auth code\n\
• /admin auth_password <password> - Submit 2FA password\n\
\n\
NAVIGATION:\n\
• Use the interactive dashboard for easy navigation\n\
• All buttons lead to appropriate actions\n\
• TDLib and System log levels can be changed from dashboard\n\
\n\
💡 TIP: Use /admin to access the interactive dashboard with hierarchical navigation.

# Notifications (NO MARKDOWN - Contains usernames and system data)
admin.notification.rate.limit.title=🚨 RATE LIMIT ALERT
admin.notification.rate.limit.timestamp=🕐 Time: {0}
admin.notification.rate.limit.details=👤 User: {0} {1}\n\
🚨 Event: Hit rate limit (0 tokens remaining)\n\
📊 Total commands: {2}\n\
📋 User status: {3}

admin.notification.shutdown.reminder.title=🚨 SHUTDOWN MODE REMINDER
admin.notification.shutdown.reminder.timestamp=🕐 Time: {0}
admin.notification.shutdown.reminder.details=⚠️ Bot has been in shutdown mode for 30+ minutes\n\
\n\
⏱️ Shutdown duration: {0}\n\
👥 Affected users: All user commands blocked\n\
👨‍💼 Admin access: Available\n\
\n\
📊 CURRENT SYSTEM STATUS:\n\
• Active users: {1} (getting maintenance message)\n\
• Monitored channels: {2} (still monitoring)\n\
• TDLib: {3}\n\
• Recent errors: {4}

# Common Elements
admin.common.unknown=Unknown
admin.common.not.available=Not available
admin.common.tag.unavailable=<tag unavailable>
admin.common.no.username=(no username)
admin.common.no.reason=(no reason provided)
admin.common.default.reason=Manual admin action

# Status indicators
admin.status.connected=✅ Connected
admin.status.disconnected=❌ Disconnected
admin.status.enabled=✅ Enabled
admin.status.disabled=❌ Disabled
admin.status.banned=Banned
admin.status.not.banned=Not banned

# Additional system log level keys
admin.log.level.title=📊 SYSTEM LOG LEVEL MANAGEMENT
admin.log.level.timestamp=🕐 Time: {0}
admin.log.level.current=📊 Current Level: {0}
admin.log.level.available=📋 AVAILABLE LEVELS:\n\
• DEBUG - Very verbose (all operations)\n\
• INFO - Normal operations\n\
• WARN - Warnings and errors only\n\
• ERROR - Errors only
admin.log.level.usage=📝 USAGE: /admin log_level <LEVEL>\n\
💡 EXAMPLE: /admin log_level INFO
admin.log.level.invalid=❌ Invalid log level. Available: DEBUG, INFO, WARN, ERROR
admin.log.level.success=✅ System log level changed to {0}
admin.log.level.failed=❌ Failed to change system log level.

# Shutdown activation message
admin.shutdown.activated=🚨 BOT SHUTDOWN ACTIVATED\n\
\n\
📝 Reason: {0}\n\
⏰ Activated at: current time\n\
\n\
📊 STATUS: Bot is now in maintenance mode\n\
• User commands blocked\n\
• Admin commands available\n\
• 30-minute reminders enabled

# Button text for ban confirmation
admin.button.enter.ban.command=✏️ Enter Ban Command
admin.button.cancel=❌ Cancel